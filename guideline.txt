# PORTFOLIO WEBSITE EDITING GUIDE

This document provides comprehensive instructions for customizing all aspects of your personal portfolio website. Use this guide to update your information, projects, skills, and styling.

## TABLE OF CONTENTS

1. Personal Information
2. Skills & Technologies
3. Projects
4. Experience & Education
5. Theme & Styling
6. Contact Form
7. Page Structure

---

## 1. PERSONAL INFORMATION

### File: `client/src/lib/personal-info.ts`

This file contains all your personal information like name, bio, profile image, and contact details.

```typescript
// Basic information
export const name = "Your Name";
export const tagline = "Your Professional Tagline"; 
export const profileImage = "photo.png"; // Update with your photo

// Bio sections
export const bioSections = [
  "First paragraph about yourself...",
  "Second paragraph about your experience...",
  "Third paragraph about your skills..."
];

// Contact information 
export const contactEmail = "your.email@example.com";
export const contactPhone = "+1 (234) 567-8901";
export const location = "City, Country";

// Social links
export const socialLinks = [
  {
    name: "Github",
    href: "https://github.com/yourusername",
    icon: "Github"
  },
  // Add or edit social links following the same format
];
```

### Education & Experience

```typescript
// Education background
export const education = [
  {
    degree: "Your Degree",
    institution: "University Name",
    year: "Year Range",
    description: "Details about your studies"
  },
  // Add more education entries as needed
];

// Work experience
export const experience = [
  {
    position: "Your Position",
    company: "Company Name",
    year: "Time Period",
    description: "Description of your responsibilities and achievements"
  },
  // Add more experience entries as needed
];
```

---

## 2. SKILLS & TECHNOLOGIES

### File: `client/src/lib/data.ts`

This file defines your skills, expertise percentages, and technologies.

### Data Skills

```typescript
export const dataSkills = [
  { name: "Python", percentage: 95 },
  { name: "Data Analysis", percentage: 90 },
  // Add or edit skills following the same format
  // Percentage should be between 0-100
];
```

### Automation Skills

```typescript
export const automationSkills = [
  { name: "Selenium", percentage: 90 },
  { name: "BeautifulSoup", percentage: 92 },
  // Add or edit automation skills following the same format
];
```

### Technologies & Tools

Add or modify technology icons in the technologies array:

```typescript
export const technologies = [
  { name: "Technology Name", icon: IconComponent, iconClass: "text-color-shade" },
  // Example:
  { name: "Python", icon: SiPython, iconClass: "text-blue-500" },
];
```

#### Available Icons:
- Import from react-icons/si for technology icons (SiReact, SiPython, etc.)
- Import from react-icons/fa for FontAwesome icons
- Import from lucide-react for more generic icons

To add a new icon:
1. Import it at the top of the file
2. Add it to the technologies array with appropriate name and color class

---

## 3. PROJECTS

### File: `client/src/lib/data.ts`

Projects are defined in the projects array. Each project has the following structure:

```typescript
export const projects = [
  {
    title: "Project Title",
    description: "Detailed description of your project explaining what it does and the problems it solves.",
    image: "URL to project image", // Use direct URLs like https://i.imgur.com/yourImage.png
    category: "Project Category", // E.g., "Web App", "Data Analysis", "Mobile App"
    categoryClass: "bg-color-500", // Background color class for category label
    technologies: [
      { name: "Tech 1", class: "bg-blue-100 text-blue-600" },
      { name: "Tech 2", class: "bg-green-100 text-green-600" },
      // Add more technologies as needed
    ],
    demoLink: "URL to live demo",
    demoText: "Live Demo", // Button text, e.g., "Live Demo", "View Site", "App Store"
    codeLink: "URL to GitHub repository",
  },
  // Add more projects following the same format
];
```

### Adding a New Project:

1. Copy the template provided in the comments
2. Fill in your project details
3. Add the project object to the projects array
4. For the image, use a direct URL to your screenshot (e.g., use Imgur or another image hosting)
5. Choose appropriate category colors:
   - bg-blue-500: Data/Analytics projects
   - bg-green-500: Web/Mobile apps
   - bg-purple-500: Dashboard/Visualization
   - bg-primary: Default purple
   - bg-red-500: Backend/Infrastructure

---

## 4. THEME & STYLING

### Main CSS: `client/src/index.css`

This file contains global styles and theme colors.

### Theme Colors:

The theme colors are defined in the `:root` CSS variables. To change the primary color, modify the `--primary` CSS variable in both the light and dark themes.

### Tailwind Config: `tailwind.config.ts`

For more advanced styling customizations, edit the Tailwind config file.

---

## 5. SECTIONS & COMPONENTS

### Section Components: `client/src/components/sections/`

Each section of the website is defined in its own component:

- `Header.tsx`: Navigation and top banner
- `Hero.tsx`: Main landing section
- `About.tsx`: About information
- `Skills.tsx`: Skills visualization
- `Projects.tsx`: Projects display
- `Contact.tsx`: Contact form
- `Footer.tsx`: Page footer

To modify a section's structure or layout, edit the corresponding component file.

---

## 6. CONTACT FORM

### File: `client/src/components/sections/Contact.tsx`

The contact form is set up to send messages to your email via the server API.

To modify contact form fields or validation:

1. Edit the `ContactFormValues` interface to add/remove fields
2. Update the `zodSchema` validation rules
3. Add or modify form elements in the UI section

---

## 7. PAGES & ROUTES

### Pages: `client/src/pages/`

These files define full pages of the website:

- `Home.tsx`: Main landing page
- `Admin.tsx`: Admin panel (requires authentication)
- `Login.tsx`: Login page
- `AllProjects.tsx`: Projects portfolio page

### Routing: `client/src/App.tsx`

Page routes are defined in the App component using the wouter library.

To add a new page:
1. Create a new file in the pages directory
2. Add the route in App.tsx

---

## 8. DEPLOYMENT

The site is configured to deploy to Netlify automatically. The configuration is in `netlify.toml`.

To deploy manually:
1. Run `npm run build`
2. The built files will be in the `dist` directory
3. Deploy these files to your hosting provider

---

## IMPORTANT REMINDERS

1. Always back up your changes before major edits
2. Test locally before deploying changes
3. Maintain consistency in styling and formatting
4. Keep image sizes optimized for web (under 500KB if possible)
5. Use proper image aspect ratios (ideally 16:9 or 4:3 for projects)

For technical assistance or custom modifications beyond this guide, please contact the original developer. 